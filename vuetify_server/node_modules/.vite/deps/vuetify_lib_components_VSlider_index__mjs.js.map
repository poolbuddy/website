{
  "version": 3,
  "sources": ["../../vuetify/src/components/VSlider/VSlider.tsx", "../../vuetify/src/components/VSlider/VSliderThumb.tsx", "../../vuetify/src/components/VSlider/slider.ts", "../../vuetify/src/components/VSlider/VSliderTrack.tsx"],
  "sourcesContent": ["// Styles\nimport './VSlider.sass'\n\n// Components\nimport { VSliderThumb } from './VSliderThumb'\nimport { VSliderTrack } from './VSliderTrack'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VLabel } from '@/components/VLabel'\n\n// Composables\nimport { makeSliderProps, useSlider, useSteps } from './slider'\nimport { makeFocusProps, useFocus } from '@/composables/focus'\nimport { useRtl } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, ref } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { VSliderThumbSlots } from './VSliderThumb'\nimport type { VSliderTrackSlots } from './VSliderTrack'\nimport type { VInputSlot, VInputSlots } from '@/components/VInput/VInput'\n\nexport type VSliderSlots = VInputSlots & VSliderThumbSlots & VSliderTrackSlots & {\n  label: VInputSlot\n}\n\nexport const makeVSliderProps = propsFactory({\n  ...makeFocusProps(),\n  ...makeSliderProps(),\n  ...makeVInputProps(),\n\n  modelValue: {\n    type: [Number, String],\n    default: 0,\n  },\n}, 'VSlider')\n\nexport const VSlider = genericComponent<VSliderSlots>()({\n  name: 'VSlider',\n\n  props: makeVSliderProps(),\n\n  emits: {\n    'update:focused': (value: boolean) => true,\n    'update:modelValue': (v: number) => true,\n    start: (value: number) => true,\n    end: (value: number) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    const thumbContainerRef = ref()\n    const { rtlClasses } = useRtl()\n\n    const steps = useSteps(props)\n\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      undefined,\n      value => {\n        return steps.roundValue(value == null ? steps.min.value : value)\n      },\n    )\n\n    const {\n      min,\n      max,\n      mousePressed,\n      roundValue,\n      onSliderMousedown,\n      onSliderTouchstart,\n      trackContainerRef,\n      position,\n      hasLabels,\n      readonly,\n    } = useSlider({\n      props,\n      steps,\n      onSliderStart: () => {\n        emit('start', model.value)\n      },\n      onSliderEnd: ({ value }) => {\n        const roundedValue = roundValue(value)\n        model.value = roundedValue\n        emit('end', roundedValue)\n      },\n      onSliderMove: ({ value }) => model.value = roundValue(value),\n      getActiveThumb: () => thumbContainerRef.value?.$el,\n    })\n\n    const { isFocused, focus, blur } = useFocus(props)\n    const trackStop = computed(() => position(model.value))\n\n    useRender(() => {\n      const inputProps = VInput.filterProps(props)\n      const hasPrepend = !!(props.label || slots.label || slots.prepend)\n\n      return (\n        <VInput\n          class={[\n            'v-slider',\n            {\n              'v-slider--has-labels': !!slots['tick-label'] || hasLabels.value,\n              'v-slider--focused': isFocused.value,\n              'v-slider--pressed': mousePressed.value,\n              'v-slider--disabled': props.disabled,\n            },\n            rtlClasses.value,\n            props.class,\n          ]}\n          style={ props.style }\n          { ...inputProps }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            prepend: hasPrepend ? slotProps => (\n              <>\n                { slots.label?.(slotProps) ?? (\n                  props.label\n                    ? (\n                      <VLabel\n                        id={ slotProps.id.value }\n                        class=\"v-slider__label\"\n                        text={ props.label }\n                      />\n                    ) : undefined\n                )}\n\n                { slots.prepend?.(slotProps) }\n              </>\n            ) : undefined,\n            default: ({ id, messagesId }) => (\n              <div\n                class=\"v-slider__container\"\n                onMousedown={ !readonly.value ? onSliderMousedown : undefined }\n                onTouchstartPassive={ !readonly.value ? onSliderTouchstart : undefined }\n              >\n                <input\n                  id={ id.value }\n                  name={ props.name || id.value }\n                  disabled={ !!props.disabled }\n                  readonly={ !!props.readonly }\n                  tabindex=\"-1\"\n                  value={ model.value }\n                />\n\n                <VSliderTrack\n                  ref={ trackContainerRef }\n                  start={ 0 }\n                  stop={ trackStop.value }\n                >\n                  {{ 'tick-label': slots['tick-label'] }}\n                </VSliderTrack>\n\n                <VSliderThumb\n                  ref={ thumbContainerRef }\n                  aria-describedby={ messagesId.value }\n                  focused={ isFocused.value }\n                  min={ min.value }\n                  max={ max.value }\n                  modelValue={ model.value }\n                  onUpdate:modelValue={ v => (model.value = v) }\n                  position={ trackStop.value }\n                  elevation={ props.elevation }\n                  onFocus={ focus }\n                  onBlur={ blur }\n                  ripple={ props.ripple }\n                >\n                  {{ 'thumb-label': slots['thumb-label'] }}\n                </VSliderThumb>\n              </div>\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSlider = InstanceType<typeof VSlider>\n", "// Styles\nimport './VSliderThumb.sass'\n\n// Components\nimport { VSliderSymbol } from './slider'\nimport { VScaleTransition } from '../transitions'\n\n// Composables\nimport { useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { useElevation } from '@/composables/elevation'\nimport { useRtl } from '@/composables/locale'\n\n// Directives\nimport Ripple from '@/directives/ripple'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { convertToUnit, genericComponent, keyValues, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { RippleDirectiveBinding } from '@/directives/ripple'\n\nexport type VSliderThumbSlots = {\n  'thumb-label': { modelValue: number }\n}\n\nexport const makeVSliderThumbProps = propsFactory({\n  focused: Boolean,\n  max: {\n    type: Number,\n    required: true,\n  },\n  min: {\n    type: Number,\n    required: true,\n  },\n  modelValue: {\n    type: Number,\n    required: true,\n  },\n  position: {\n    type: Number,\n    required: true,\n  },\n  ripple: {\n    type: [Boolean, Object] as PropType<RippleDirectiveBinding['value']>,\n    default: true,\n  },\n\n  ...makeComponentProps(),\n}, 'VSliderThumb')\n\nexport const VSliderThumb = genericComponent<VSliderThumbSlots>()({\n  name: 'VSliderThumb',\n\n  directives: { Ripple },\n\n  props: makeVSliderThumbProps(),\n\n  emits: {\n    'update:modelValue': (v: number) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    const slider = inject(VSliderSymbol)\n    const { isRtl, rtlClasses } = useRtl()\n    if (!slider) throw new Error('[Vuetify] v-slider-thumb must be used inside v-slider or v-range-slider')\n\n    const {\n      thumbColor,\n      step,\n      disabled,\n      thumbSize,\n      thumbLabel,\n      direction,\n      isReversed,\n      vertical,\n      readonly,\n      elevation,\n      mousePressed,\n      decimals,\n      indexFromEnd,\n    } = slider\n\n    const { textColorClasses, textColorStyles } = useTextColor(thumbColor)\n\n    const { pageup, pagedown, end, home, left, right, down, up } = keyValues\n    const relevantKeys = [pageup, pagedown, end, home, left, right, down, up]\n\n    const multipliers = computed(() => {\n      if (step.value) return [1, 2, 3]\n      else return [1, 5, 10]\n    })\n\n    function parseKeydown (e: KeyboardEvent, value: number) {\n      if (!relevantKeys.includes(e.key)) return\n\n      e.preventDefault()\n\n      const _step = step.value || 0.1\n      const steps = (props.max - props.min) / _step\n      if ([left, right, down, up].includes(e.key)) {\n        const increase = vertical.value\n          ? [isRtl.value ? left : right, isReversed.value ? down : up]\n          : indexFromEnd.value !== isRtl.value ? [left, up] : [right, up]\n        const direction = increase.includes(e.key) ? 1 : -1\n        const multiplier = e.shiftKey ? 2 : (e.ctrlKey ? 1 : 0)\n\n        value = value + (direction * _step * multipliers.value[multiplier])\n      } else if (e.key === home) {\n        value = props.min\n      } else if (e.key === end) {\n        value = props.max\n      } else {\n        const direction = e.key === pagedown ? 1 : -1\n        value = value - (direction * _step * (steps > 100 ? steps / 10 : 10))\n      }\n\n      return Math.max(props.min, Math.min(props.max, value))\n    }\n\n    function onKeydown (e: KeyboardEvent) {\n      const newValue = parseKeydown(e, props.modelValue)\n\n      newValue != null && emit('update:modelValue', newValue)\n    }\n\n    useRender(() => {\n      const positionPercentage = convertToUnit(indexFromEnd.value ? 100 - props.position : props.position, '%')\n      const { elevationClasses } = useElevation(computed(() => !disabled.value ? elevation.value : undefined))\n\n      return (\n        <div\n          class={[\n            'v-slider-thumb',\n            {\n              'v-slider-thumb--focused': props.focused,\n              'v-slider-thumb--pressed': props.focused && mousePressed.value,\n            },\n            props.class,\n            rtlClasses.value,\n          ]}\n          style={[\n            {\n              '--v-slider-thumb-position': positionPercentage,\n              '--v-slider-thumb-size': convertToUnit(thumbSize.value),\n            },\n            props.style,\n          ]}\n          role=\"slider\"\n          tabindex={ disabled.value ? -1 : 0 }\n          aria-valuemin={ props.min }\n          aria-valuemax={ props.max }\n          aria-valuenow={ props.modelValue }\n          aria-readonly={ !!readonly.value }\n          aria-orientation={ direction.value }\n          onKeydown={ !readonly.value ? onKeydown : undefined }\n        >\n          <div\n            class={[\n              'v-slider-thumb__surface',\n              textColorClasses.value,\n              elevationClasses.value,\n            ]}\n            style={{\n              ...textColorStyles.value,\n            }}\n          />\n          <div\n            class={[\n              'v-slider-thumb__ripple',\n              textColorClasses.value,\n            ]}\n            style={ textColorStyles.value }\n            v-ripple={[props.ripple, null, ['circle', 'center']]}\n          />\n          <VScaleTransition origin=\"bottom center\">\n            <div\n              class=\"v-slider-thumb__label-container\"\n              v-show={ (thumbLabel.value && props.focused) || thumbLabel.value === 'always' }\n            >\n              <div\n                class={[\n                  'v-slider-thumb__label',\n                ]}\n              >\n                <div>\n                  { slots['thumb-label']?.({ modelValue: props.modelValue }) ?? props.modelValue.toFixed(step.value ? decimals.value : 1) }\n                </div>\n              </div>\n            </div>\n          </VScaleTransition>\n        </div>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSliderThumb = InstanceType<typeof VSliderThumb>\n", "/* eslint-disable max-statements */\n// Composables\nimport { makeElevationProps } from '@/composables/elevation'\nimport { useRtl } from '@/composables/locale'\nimport { makeRoundedProps } from '@/composables/rounded'\n\n// Utilities\nimport { computed, provide, ref, shallowRef, toRef } from 'vue'\nimport { clamp, createRange, getDecimals, propsFactory } from '@/util'\n\n// Types\nimport type { ExtractPropTypes, InjectionKey, PropType, Ref } from 'vue'\nimport type { VSliderTrack } from './VSliderTrack'\n\nexport type Tick = {\n  value: number\n  position: number\n  label?: string\n}\n\ntype SliderProvide = {\n  activeThumbRef: Ref<HTMLElement | undefined>\n  color: Ref<string | undefined>\n  decimals: Ref<number>\n  direction: Ref<'vertical' | 'horizontal'>\n  disabled: Ref<boolean | null | undefined>\n  elevation: Ref<number | string | undefined>\n  min: Ref<number>\n  max: Ref<number>\n  mousePressed: Ref<boolean>\n  numTicks: Ref<number>\n  onSliderMousedown: (e: MouseEvent) => void\n  onSliderTouchstart: (e: TouchEvent) => void\n  parseMouseMove: (e: MouseEvent | TouchEvent) => number\n  position: (val: number) => number\n  readonly: Ref<boolean | null | undefined>\n  rounded: Ref<boolean | number | string | undefined>\n  roundValue: (value: number) => number\n  thumbLabel: Ref<boolean | string | undefined>\n  showTicks: Ref<boolean | 'always'>\n  startOffset: Ref<number>\n  step: Ref<number>\n  thumbSize: Ref<number>\n  thumbColor: Ref<string | undefined>\n  trackColor: Ref<string | undefined>\n  trackFillColor: Ref<string | undefined>\n  trackSize: Ref<number>\n  ticks: Ref<readonly number[] | Record<string, string> | undefined>\n  tickSize: Ref<number>\n  trackContainerRef: Ref<VSliderTrack | undefined>\n  vertical: Ref<boolean>\n  parsedTicks: Ref<Tick[]>\n  hasLabels: Ref<boolean>\n  isReversed: Ref<boolean>\n  indexFromEnd: Ref<boolean>\n}\n\nexport const VSliderSymbol: InjectionKey<SliderProvide> = Symbol.for('vuetify:v-slider')\n\nexport function getOffset (e: MouseEvent | TouchEvent, el: HTMLElement, direction: string) {\n  const vertical = direction === 'vertical'\n  const rect = el.getBoundingClientRect()\n  const touch = 'touches' in e ? e.touches[0] : e\n  return vertical\n    ? touch.clientY - (rect.top + rect.height / 2)\n    : touch.clientX - (rect.left + rect.width / 2)\n}\n\nfunction getPosition (e: MouseEvent | TouchEvent, position: 'clientX' | 'clientY'): number {\n  if ('touches' in e && e.touches.length) return e.touches[0][position]\n  else if ('changedTouches' in e && e.changedTouches.length) return e.changedTouches[0][position]\n  else return (e as MouseEvent)[position]\n}\n\nexport const makeSliderProps = propsFactory({\n  disabled: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  error: Boolean,\n  readonly: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  max: {\n    type: [Number, String],\n    default: 100,\n  },\n  min: {\n    type: [Number, String],\n    default: 0,\n  },\n  step: {\n    type: [Number, String],\n    default: 0,\n  },\n  thumbColor: String,\n  thumbLabel: {\n    type: [Boolean, String] as PropType<boolean | 'always' | undefined>,\n    default: undefined,\n    validator: (v: any) => typeof v === 'boolean' || v === 'always',\n  },\n  thumbSize: {\n    type: [Number, String],\n    default: 20,\n  },\n  showTicks: {\n    type: [Boolean, String] as PropType<boolean | 'always'>,\n    default: false,\n    validator: (v: any) => typeof v === 'boolean' || v === 'always',\n  },\n  ticks: {\n    type: [Array, Object] as PropType<readonly number[] | Record<number, string>>,\n  },\n  tickSize: {\n    type: [Number, String],\n    default: 2,\n  },\n  color: String,\n  trackColor: String,\n  trackFillColor: String,\n  trackSize: {\n    type: [Number, String],\n    default: 4,\n  },\n  direction: {\n    type: String as PropType<'horizontal' | 'vertical'>,\n    default: 'horizontal',\n    validator: (v: any) => ['vertical', 'horizontal'].includes(v),\n  },\n  reverse: Boolean,\n\n  ...makeRoundedProps(),\n  ...makeElevationProps({\n    elevation: 2,\n  }),\n  ripple: {\n    type: Boolean,\n    default: true,\n  },\n}, 'Slider')\n\ntype SliderProps = ExtractPropTypes<ReturnType<typeof makeSliderProps>>\n\ntype SliderData = {\n  value: number\n}\n\nexport const useSteps = (props: SliderProps) => {\n  const min = computed(() => parseFloat(props.min))\n  const max = computed(() => parseFloat(props.max))\n  const step = computed(() => +props.step > 0 ? parseFloat(props.step) : 0)\n  const decimals = computed(() => Math.max(getDecimals(step.value), getDecimals(min.value)))\n\n  function roundValue (value: string | number) {\n    value = parseFloat(value)\n\n    if (step.value <= 0) return value\n\n    const clamped = clamp(value, min.value, max.value)\n    const offset = min.value % step.value\n    const newValue = Math.round((clamped - offset) / step.value) * step.value + offset\n\n    return parseFloat(Math.min(newValue, max.value).toFixed(decimals.value))\n  }\n\n  return { min, max, step, decimals, roundValue }\n}\n\nexport const useSlider = ({\n  props,\n  steps,\n  onSliderStart,\n  onSliderMove,\n  onSliderEnd,\n  getActiveThumb,\n}: {\n  props: SliderProps\n  steps: ReturnType<typeof useSteps>\n  onSliderEnd: (data: SliderData) => void\n  onSliderStart: (data: SliderData) => void\n  onSliderMove: (data: SliderData) => void\n  getActiveThumb: (e: MouseEvent | TouchEvent) => HTMLElement\n}) => {\n  const { isRtl } = useRtl()\n  const isReversed = toRef(props, 'reverse')\n  const vertical = computed(() => props.direction === 'vertical')\n  const indexFromEnd = computed(() => vertical.value !== isReversed.value)\n\n  const { min, max, step, decimals, roundValue } = steps\n\n  const thumbSize = computed(() => parseInt(props.thumbSize, 10))\n  const tickSize = computed(() => parseInt(props.tickSize, 10))\n  const trackSize = computed(() => parseInt(props.trackSize, 10))\n  const numTicks = computed(() => (max.value - min.value) / step.value)\n  const disabled = toRef(props, 'disabled')\n\n  const thumbColor = computed(() => props.error || props.disabled ? undefined : props.thumbColor ?? props.color)\n  const trackColor = computed(() => props.error || props.disabled ? undefined : props.trackColor ?? props.color)\n  const trackFillColor = computed(() => props.error || props.disabled ? undefined : props.trackFillColor ?? props.color)\n\n  const mousePressed = shallowRef(false)\n\n  const startOffset = shallowRef(0)\n  const trackContainerRef = ref<VSliderTrack | undefined>()\n  const activeThumbRef = ref<HTMLElement | undefined>()\n\n  function parseMouseMove (e: MouseEvent | TouchEvent): number {\n    const vertical = props.direction === 'vertical'\n    const start = vertical ? 'top' : 'left'\n    const length = vertical ? 'height' : 'width'\n    const position = vertical ? 'clientY' : 'clientX'\n\n    const {\n      [start]: trackStart,\n      [length]: trackLength,\n    } = trackContainerRef.value?.$el.getBoundingClientRect()\n    const clickOffset = getPosition(e, position)\n\n    // It is possible for left to be NaN, force to number\n    let clickPos = Math.min(Math.max((clickOffset - trackStart - startOffset.value) / trackLength, 0), 1) || 0\n\n    if (vertical ? indexFromEnd.value : indexFromEnd.value !== isRtl.value) clickPos = 1 - clickPos\n\n    return roundValue(min.value + clickPos * (max.value - min.value))\n  }\n\n  const handleStop = (e: MouseEvent | TouchEvent) => {\n    onSliderEnd({ value: parseMouseMove(e) })\n\n    mousePressed.value = false\n    startOffset.value = 0\n  }\n\n  const handleStart = (e: MouseEvent | TouchEvent) => {\n    activeThumbRef.value = getActiveThumb(e)\n\n    if (!activeThumbRef.value) return\n\n    activeThumbRef.value.focus()\n    mousePressed.value = true\n\n    if (activeThumbRef.value.contains(e.target as Node)) {\n      startOffset.value = getOffset(e, activeThumbRef.value, props.direction)\n    } else {\n      startOffset.value = 0\n      onSliderMove({ value: parseMouseMove(e) })\n    }\n\n    onSliderStart({ value: parseMouseMove(e) })\n  }\n\n  const moveListenerOptions = { passive: true, capture: true }\n\n  function onMouseMove (e: MouseEvent | TouchEvent) {\n    onSliderMove({ value: parseMouseMove(e) })\n  }\n\n  function onSliderMouseUp (e: MouseEvent) {\n    e.stopPropagation()\n    e.preventDefault()\n\n    handleStop(e)\n\n    window.removeEventListener('mousemove', onMouseMove, moveListenerOptions)\n    window.removeEventListener('mouseup', onSliderMouseUp)\n  }\n\n  function onSliderTouchend (e: TouchEvent) {\n    handleStop(e)\n\n    window.removeEventListener('touchmove', onMouseMove, moveListenerOptions)\n    e.target?.removeEventListener('touchend', onSliderTouchend as EventListener)\n  }\n\n  function onSliderTouchstart (e: TouchEvent) {\n    handleStart(e)\n\n    window.addEventListener('touchmove', onMouseMove, moveListenerOptions)\n    e.target?.addEventListener('touchend', onSliderTouchend as EventListener, { passive: false })\n  }\n\n  function onSliderMousedown (e: MouseEvent) {\n    e.preventDefault()\n\n    handleStart(e)\n\n    window.addEventListener('mousemove', onMouseMove, moveListenerOptions)\n    window.addEventListener('mouseup', onSliderMouseUp, { passive: false })\n  }\n\n  const position = (val: number) => {\n    const percentage = (val - min.value) / (max.value - min.value) * 100\n    return clamp(isNaN(percentage) ? 0 : percentage, 0, 100)\n  }\n\n  const showTicks = toRef(props, 'showTicks')\n  const parsedTicks = computed<Tick[]>(() => {\n    if (!showTicks.value) return []\n\n    if (!props.ticks) {\n      return numTicks.value !== Infinity ? createRange(numTicks.value + 1).map(t => {\n        const value = min.value + (t * step.value)\n        return {\n          value,\n          position: position(value),\n        }\n      }) : []\n    }\n    if (Array.isArray(props.ticks)) return props.ticks.map(t => ({ value: t, position: position(t), label: t.toString() }))\n    return Object.keys(props.ticks).map(key => ({\n      value: parseFloat(key),\n      position: position(parseFloat(key)),\n      label: (props.ticks as Record<string, string>)[key],\n    }))\n  })\n\n  const hasLabels = computed(() => parsedTicks.value.some(({ label }) => !!label))\n\n  const data: SliderProvide = {\n    activeThumbRef,\n    color: toRef(props, 'color'),\n    decimals,\n    disabled,\n    direction: toRef(props, 'direction'),\n    elevation: toRef(props, 'elevation'),\n    hasLabels,\n    isReversed,\n    indexFromEnd,\n    min,\n    max,\n    mousePressed,\n    numTicks,\n    onSliderMousedown,\n    onSliderTouchstart,\n    parsedTicks,\n    parseMouseMove,\n    position,\n    readonly: toRef(props, 'readonly'),\n    rounded: toRef(props, 'rounded'),\n    roundValue,\n    showTicks,\n    startOffset,\n    step,\n    thumbSize,\n    thumbColor,\n    thumbLabel: toRef(props, 'thumbLabel'),\n    ticks: toRef(props, 'ticks'),\n    tickSize,\n    trackColor,\n    trackContainerRef,\n    trackFillColor,\n    trackSize,\n    vertical,\n  }\n\n  provide(VSliderSymbol, data)\n\n  return data\n}\n", "// Styles\nimport './VSliderTrack.sass'\n\n// Components\nimport { VSliderSymbol } from './slider'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { useRounded } from '@/composables/rounded'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { convertToUnit, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { Tick } from './slider'\n\nexport type VSliderTrackSlots = {\n  'tick-label': { tick: Tick, index: number }\n}\n\nexport const makeVSliderTrackProps = propsFactory({\n  start: {\n    type: Number,\n    required: true,\n  },\n  stop: {\n    type: Number,\n    required: true,\n  },\n\n  ...makeComponentProps(),\n}, 'VSliderTrack')\n\nexport const VSliderTrack = genericComponent<VSliderTrackSlots>()({\n  name: 'VSliderTrack',\n\n  props: makeVSliderTrackProps(),\n\n  emits: {},\n\n  setup (props, { slots }) {\n    const slider = inject(VSliderSymbol)\n\n    if (!slider) throw new Error('[Vuetify] v-slider-track must be inside v-slider or v-range-slider')\n\n    const {\n      color,\n      parsedTicks,\n      rounded,\n      showTicks,\n      tickSize,\n      trackColor,\n      trackFillColor,\n      trackSize,\n      vertical,\n      min,\n      max,\n      indexFromEnd,\n    } = slider\n\n    const { roundedClasses } = useRounded(rounded)\n\n    const {\n      backgroundColorClasses: trackFillColorClasses,\n      backgroundColorStyles: trackFillColorStyles,\n    } = useBackgroundColor(trackFillColor)\n\n    const {\n      backgroundColorClasses: trackColorClasses,\n      backgroundColorStyles: trackColorStyles,\n    } = useBackgroundColor(trackColor)\n\n    const startDir = computed(() => `inset-${vertical.value ? 'block' : 'inline'}-${indexFromEnd.value ? 'end' : 'start'}`)\n    const endDir = computed(() => vertical.value ? 'height' : 'width')\n\n    const backgroundStyles = computed(() => {\n      return {\n        [startDir.value]: '0%',\n        [endDir.value]: '100%',\n      }\n    })\n\n    const trackFillWidth = computed(() => props.stop - props.start)\n\n    const trackFillStyles = computed(() => {\n      return {\n        [startDir.value]: convertToUnit(props.start, '%'),\n        [endDir.value]: convertToUnit(trackFillWidth.value, '%'),\n      }\n    })\n\n    const computedTicks = computed(() => {\n      if (!showTicks.value) return []\n\n      const ticks = vertical.value ? parsedTicks.value.slice().reverse() : parsedTicks.value\n\n      return ticks.map((tick, index) => {\n        const directionValue = tick.value !== min.value && tick.value !== max.value ? convertToUnit(tick.position, '%') : undefined\n\n        return (\n          <div\n            key={ tick.value }\n            class={[\n              'v-slider-track__tick',\n              {\n                'v-slider-track__tick--filled': tick.position >= props.start && tick.position <= props.stop,\n                'v-slider-track__tick--first': tick.value === min.value,\n                'v-slider-track__tick--last': tick.value === max.value,\n              },\n            ]}\n            style={{ [startDir.value]: directionValue }}\n          >\n            {\n              (tick.label || slots['tick-label']) && (\n                <div class=\"v-slider-track__tick-label\">\n                  { slots['tick-label']?.({ tick, index }) ?? tick.label }\n                </div>\n              )\n            }\n          </div>\n        )\n      })\n    })\n\n    useRender(() => {\n      return (\n        <div\n          class={[\n            'v-slider-track',\n            roundedClasses.value,\n            props.class,\n          ]}\n          style={[\n            {\n              '--v-slider-track-size': convertToUnit(trackSize.value),\n              '--v-slider-tick-size': convertToUnit(tickSize.value),\n            },\n            props.style,\n          ]}\n        >\n          <div\n            class={[\n              'v-slider-track__background',\n              trackColorClasses.value,\n              {\n                'v-slider-track__background--opacity': !!color.value || !trackFillColor.value,\n              },\n            ]}\n            style={{\n              ...backgroundStyles.value,\n              ...trackColorStyles.value,\n            }}\n          />\n          <div\n            class={[\n              'v-slider-track__fill',\n              trackFillColorClasses.value,\n            ]}\n            style={{\n              ...trackFillStyles.value,\n              ...trackFillColorStyles.value,\n            }}\n          />\n\n          { showTicks.value && (\n            <div\n              class={[\n                'v-slider-track__ticks',\n                {\n                  'v-slider-track__ticks--always-show': showTicks.value === 'always',\n                },\n              ]}\n            >\n              { computedTicks.value }\n            </div>\n          )}\n        </div>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSliderTrack = InstanceType<typeof VSliderTrack>\n"],
  "mappings": "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",
  "names": ["VSliderSymbol", "Symbol", "for", "getOffset", "e", "el", "direction", "vertical", "rect", "getBoundingClientRect", "touch", "touches", "clientY", "top", "height", "clientX", "left", "width", "getPosition", "position", "length", "changedTouches", "makeSliderProps", "propsFactory", "disabled", "type", "Boolean", "default", "error", "readonly", "max", "Number", "String", "min", "step", "thumbColor", "thumbLabel", "undefined", "validator", "v", "thumbSize", "showTicks", "ticks", "Array", "Object", "tickSize", "color", "trackColor", "trackFillColor", "trackSize", "includes", "reverse", "makeRoundedProps", "makeElevationProps", "elevation", "ripple", "useSteps", "props", "computed", "parseFloat", "decimals", "Math", "getDecimals", "value", "roundValue", "clamped", "clamp", "offset", "newValue", "round", "toFixed", "useSlider", "_ref", "steps", "onSliderStart", "onSliderMove", "onSliderEnd", "getActiveThumb", "isRtl", "useRtl", "isReversed", "toRef", "indexFromEnd", "parseInt", "numTicks", "mousePressed", "shallowRef", "startOffset", "trackContainerRef", "ref", "activeThumbRef", "parseMouseMove", "start", "trackStart", "trackLength", "$el", "clickOffset", "clickPos", "handleStop", "handleStart", "focus", "contains", "target", "moveListenerOptions", "passive", "capture", "onMouseMove", "onSliderMouseUp", "stopPropagation", "preventDefault", "window", "removeEventListener", "onSliderTouchend", "onSliderTouchstart", "addEventListener", "onSliderMousedown", "val", "percentage", "isNaN", "parsedTicks", "Infinity", "createRange", "map", "t", "isArray", "label", "toString", "keys", "key", "hasLabels", "some", "_ref2", "data", "rounded", "provide", "makeVSliderThumbProps", "propsFactory", "focused", "Boolean", "max", "type", "Number", "required", "min", "modelValue", "position", "ripple", "Object", "default", "makeComponentProps", "VSliderThumb", "genericComponent", "name", "directives", "Ripple", "props", "emits", "v", "setup", "_ref", "slots", "emit", "slider", "inject", "VSliderSymbol", "isRtl", "rtlClasses", "useRtl", "Error", "thumbColor", "step", "disabled", "thumbSize", "thumbLabel", "direction", "isReversed", "vertical", "readonly", "elevation", "mousePressed", "decimals", "indexFromEnd", "textColorClasses", "textColorStyles", "useTextColor", "pageup", "pagedown", "end", "home", "left", "right", "down", "up", "keyValues", "relevantKeys", "multipliers", "computed", "value", "parseKeydown", "e", "includes", "key", "preventDefault", "_step", "steps", "increase", "multiplier", "shiftKey", "ctrlKey", "Math", "onKeydown", "newValue", "useRender", "positionPercentage", "convertToUnit", "elevationClasses", "useElevation", "undefined", "_createVNode", "class", "style", "_withDirectives", "_resolveDirective", "circle", "center", "VScaleTransition", "toFixed", "_vShow", "makeVSliderTrackProps", "propsFactory", "start", "type", "Number", "required", "stop", "makeComponentProps", "VSliderTrack", "genericComponent", "name", "props", "emits", "setup", "_ref", "slots", "slider", "inject", "VSliderSymbol", "Error", "color", "parsedTicks", "rounded", "showTicks", "tickSize", "trackColor", "trackFillColor", "trackSize", "vertical", "min", "max", "indexFromEnd", "roundedClasses", "useRounded", "backgroundColorClasses", "trackFillColorClasses", "backgroundColorStyles", "trackFillColorStyles", "useBackgroundColor", "trackColorClasses", "trackColorStyles", "startDir", "computed", "value", "endDir", "backgroundStyles", "trackFillWidth", "trackFillStyles", "convertToUnit", "computedTicks", "ticks", "slice", "reverse", "map", "tick", "index", "directionValue", "position", "undefined", "_createVNode", "label", "useRender", "class", "style", "makeVSliderProps", "propsFactory", "makeFocusProps", "makeSliderProps", "makeVInputProps", "modelValue", "type", "Number", "String", "default", "VSlider", "genericComponent", "name", "props", "emits", "value", "v", "start", "end", "setup", "_ref", "slots", "emit", "thumbContainerRef", "ref", "rtlClasses", "useRtl", "steps", "useSteps", "model", "useProxiedModel", "undefined", "roundValue", "min", "max", "mousePressed", "onSliderMousedown", "onSliderTouchstart", "trackContainerRef", "position", "hasLabels", "readonly", "useSlider", "onSliderStart", "onSliderEnd", "_ref2", "roundedValue", "onSliderMove", "_ref3", "getActiveThumb", "$el", "isFocused", "focus", "blur", "useFocus", "trackStop", "computed", "useRender", "inputProps", "VInput", "filterProps", "hasPrepend", "label", "prepend", "_createVNode", "_mergeProps", "disabled", "class", "style", "slotProps", "_Fragment", "VLabel", "id", "_ref4", "messagesId", "VSliderTrack", "VSliderThumb", "elevation", "ripple"]
}
